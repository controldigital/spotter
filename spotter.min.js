class SpotterItem{constructor(a,b){this.elements=a,this.options=b}get elements(){return this.elementsList}set elements(a){if(!a)throw new Error(`First parameter "elements" has not been given. The function will halt.`);else if(a&&'object'==typeof a){if(a instanceof NodeList||a instanceof HTMLCollection)this.elementsList=a;else if(a instanceof Array)a.forEach(b=>{this.elementsList.push(document.querySelector(b))});else throw new Error(`elements should be an array of elements,a single HTMLElement or a string.`);}else if('string'==typeof a){let b=document.querySelectorAll(a);b.length&&(this.elementsList=b)}}get options(){return this.settings}set options(a){if(a&&'object'==typeof a){for(let b in this.settings={animation:!1,hide:!1,repeat:!1,lazyLoad:!1,spotted:()=>{},unSpotted:()=>{}},this.settings)this.settings.hasOwnProperty(b)&&void 0!==a[b]&&(this.settings[b]=a[b]);this.elementsList&&this.elementsList.length&&this.elementsList.forEach(b=>{b.settings=this.settings})}else throw new Error(`options argument is given or is not an object.`)}addElement(a){a&&(a instanceof HTMLElement?this.elementsList.push(a):'string'==typeof a&&this.elementsList.push(document.querySelector(a)))}removeElement(a){a&&this.elementsList.splice(a,1)}}class Spotter{constructor(a){if(this.items=[],this.observerOptions={root:null,rootMargin:'0px',threshold:0},this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,window.addEventListener('resize',()=>{this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth}),a&&(this.options=a),'IntersectionObserver'in window)this._setIntersectionObserver();else throw new Error(`Your browser doesn't support IntersectionObserver. The function will end.`)}set options(a){if(a&&'object'==typeof a)for(let b in this.observerOptions)this.observerOptions.hasOwnProperty(b)&&void 0!==a[b]&&(this.observerOptions[b]=a[b]);else throw new Error(`options argument is not present or is not an object.`)}get options(){return this.observerOptions}_setIntersectionObserver(){this.observer=new IntersectionObserver(this._inViewIntersectionObserver.bind(this),this.options)}_observeEntries(){this.items.forEach(a=>{a.elementsList.forEach(b=>{this.observer.observe(b)})})}_unObserveEntries(a){a.elementsList.forEach(b=>{this.observer.unobserve(b)})}_inViewIntersectionObserver(a){a.forEach(b=>{let c=b.target.settings;(!0===c.hide||1===c.hide)&&this.hide(b.target),!0===b.isIntersecting?(c.animation&&this.animate(b.target),(!0===c.lazyLoad||1===c.lazyLoad)&&this.lazyLoadImages(b.target),c.spotted&&'function'==typeof c.spotted&&c.spotted(b.target)):((!0===c.repeat||1===c.repeat)&&this.hide(b.target),c.unSpotted&&'function'==typeof c.unSpotted&&c.unSpotted(b.target))})}_isElement(a){if(a)try{return a instanceof HTMLElement}catch(b){return'object'==typeof a&&1===a.nodeType&&'object'==typeof a.style&&'object'==typeof a.ownerDocument}}add(a,b={}){return this.items.push(new SpotterItem(a,b)),this._observeEntries(),this}remove(a){let b=this.items[a];return this._unObserveEntries(b),this.items.splice(a,1),this}animate(a){if(a&&this._isElement(a)){let b=a.settings.animation;if('string'==typeof b)a.classList.add(b);else if('object'==typeof b)for(let c in b)b.hasOwnProperty(c)&&(a.style[c]=b[c]);return this}throw new Error(`element is not an instance of HTMLElement or is not given.`)}hide(a){if(a&&this._isElement(a)){if('boolean'==typeof a.settings.hide?(a.style.opacity=0,a.style.visibility='hidden'):'string'==typeof a.settings.hide&&a.classList.add(a.settings.hide),a.settings.animation)if('string'==typeof a.settings.animation)a.classList.remove(a.settings.animation);else if('object'==typeof a.settings.animation)for(let b in a.settings.animation)a.settings.animation.hasOwnProperty(b)&&(a.style[b]='');return this}throw new Error(`element is not an instance of HTMLElement or is not given.`)}lazyLoadImages(a){const b=c=>{let d=new Image,e=c.getAttribute('data-src');d.onload=()=>{c.removeAttribute('data-src'),c.setAttribute('src',e)},d.src=e};if(a&&this._isElement(a))if(a.hasAttribute('data-src'))b(a);else{let c=a.querySelectorAll('img');c.length&&c.forEach(d=>{d.hasAttribute('data-src')&&b(d)})}}}
